* 2016-March-21-Monday
** From 10:00 AM TO 05:30 PM :
- I have gone through the basics of networking concepts and learned about
  various protocols.
- Here I choose Cisco Packet Tracer tool developed by =Cisco Organization= to
  understand more about networking formation, packet simulation and server configuration.
* Network:
- Network can be defined as a group of computers which are inter connected
  together to exchange the data.
- Diagram goes here
- Explanation about above diagram 
* Network Topology:
- Network topology is the arrangement of the various elements (links, nodes, etc.) of a computer network. 
  Essentially, it is the topological structure of a network and may be depicted physically or logically.
 * EX := Bus Topology, Tree Topology, Ring Topology and Star Topology.
* LAN(Local Area Network):
- A LAN is a type of computer network in which networking facility is available in a small physical area (mostly in meters but very rarely in kilometers) probably in an office building, home and 
  school etc. Each computer or device connected to the network is called as a node.
** Uses of LAN:
-  LAN is useful for sharing resources like files, printer service, games or other applications.
** Examples of LAN:
- =Vlead Network= is an example of a LAN.
* WAN(Wired Area Network):
- A wide area network, or WAN, occupies a very large area, such as an entire country or the entire world. A WAN can contain multiple smaller networks, such as LANs or MANs. 
 * Ex := The Internet is the best-known example of a public WAN.
* Internet Protocol (IP):
- Internet Protocol is a unique address which is used to identify the
  computer/machine on a network.
- Which is used to identify the location of the computer in the world.
* IPV4:
- IPv4 stands for Internet Protocol Version 4. which uses 32-bits for address
  space and this uses TCP/IP host addressing mechanism.
- In which total address space is divided into 4 octets. Each octet value in
  decimal is 0-255.
 * Ex1 := 11000100.10101010.10101111.11010101
 * Ex2 := 175.56.43.23
- The above ip-address is in the dotted decimal number format. An ip address is in the format of 4 sets of decimal numbers separated by dots. The decimal number in each and every set is in the range 0 to 255. 
  Each and every set is called octet. So, there are 4 octets in an ip address.
** IP address classes:
- IPV4 address space is divided into several categerios for efficiant use of total address sapce. 
- Each class allows for a range of valid IP addresses, shown in the following table.
** Public IP:
- A public IP address is an IP address that can be accessed over the Internet. Like postal address used to deliver a postal mail to your home.
- A public IP address is the globally unique IP address assigned to a computing device.
 * Ex := 175.101.8.162
** Private IP:
- A private IP address is the address space allocated by InterNIC to allow organizations to create their own private network.
 * Ex := 10.2.59.109
** Static IP:
- Static IP is a fixed ip,it will not change
** Dynamic IP:
- It is an IP address is which is assigned by the DHCP server over network and
  it may change over time.
* Network Classes:
| CLASS A |   1.0.0.1-126.255.255.254 |  For Internet communication          |
| CLASS B | 128.1.0.1-191.255.255.254 |              Same as class A         |
| CLASS C | 192.0.1.1-223.255.254.254 |              Same as class A         |
| CLASS D | 224.0.0.0-239.255.255.255 | Reserved for Multicasting            |
| CLASS E | 240.0.0.0-254.255.255.254 | used for researching and experiments |
* IPV6:
- IPv6 stands for Internet Protocol Version 6. which uses 128-bits for address space and IPV6 denoted by eight groups of hexadecimal quartets separated by colons in between them.
 * Ex := 2001:cdba:0000:0000:0000:0000:3257:9652
* Protocol:
- A Protocol is a set of rules which governs the communication between two
  computers which are connected by the network.
 * Ex := IP, HTTP and FTP etc.
** HTTP:
- HTTP stands for Hypertext Transfer Protocol. Which is responsible for
  loading/transfer the web data over internet.
- All browsing communication will happens using =http= protocal only.
- This protocal uses =80= protocal.
 * Ex := A browser is an HTTP client because it sends requests to an HTTP
   server (Web server), which then sends responses back to the client.  The
   standard (and default) port for HTTP servers to listen on is 80.
** FTP(File Transfer Protocol):
- The File Transfer Protocol (FTP) is a standard network protocol, which is
  used to transfer computer files between a client and server on a computer
  network.
- This will use port number 20/21

*Ex:-* Python File Sharing Server.
** SMTP(Simple Mail Transfer Protocol):
- SMTP stands for Simple Mail Transfer Protocol, which is generally used to
  send messages from a mail client to a mail server.
- This will use 25 port number. 
** TCP/IP (Transmission Control Protocol):
- TCP/IP is the basic communication language or protocol of the Internet. 
- It can also be used as a communications protocol in a private network
* VPN(Virtual Private Network):
- A Virtual Private Network (VPN) is a network technology that creates a secure network connection over a public network such as the Internet or a 
  private network owned by a service provider. And VPN can connect multiple sites over a large distance just like a Wide Area Network (WAN).
* Gateway:
- A gateway is a hardware device that acts as a "gate" between two networks. It may be a router, firewall, server, or other device that enables traffic to flow in and out of the network.
- A router is an example of a gateway device. A router is a device that does routing, deciding where packets are sent to based on its IP address.
* Netmask:
- A netmask is a 32-bit number,that mask is used to divide an IP address into subnets and specify the network's available hosts.
| CLASS A |     255.0.0.0 |
| CLASS B |   255.255.0.0 |
| CLASS C | 255.255.255.0 |
* PING:
- Ping is a networking utility program. Which is used for verification of IP connectivity.
#+begin_example
ping www.google.com
#+end_example
* Port:
- which specifies the process in the machine
- Port values range from 0-65535
* Port Numbers for given following Protocols:
| SSH   |    22 |
| HTTP  |    80 |
| HTTPS |   443 |
| FTP   | 20/21 |
| SMTP  |    25 |
| DNS   |    53 |
| DHCP  |    67 |
* 2016-March-22-Tuesday
** From 09:30 AM TO 05:30 PM :
- Today I learned about basics of client-server architecture and read about few servers such as Apache (LAMP), DNS, DHCP, SSH and Bridge. 
* Router:
- Router is a device which is used to connect to the different network elements.
* Switch:
- switch is a device which is used to connect the same network elements.
* Web Server:
 - A web server is an information technology that processes requests via HTTP, 
   the basic network protocol used to distribute information on the World Wide Web.
 - The server is machine or programme that process the client request and send back the response.
* Client:
 - Cleint is a machine in which request a service from the server.
* XAMPP:
XAMPP is available with various distributions depends upon the OS.
- LAMP : For Linux
- WAMP : For Windows
- MAMP  : For MAC OS
- LAMP is a free and open source Linux web server tool kit package, It consisting of the Apache HTTP Server, 
   MySQL database, and interpreters for scripts written in the PHP and Perl programming languages.
- It is used as a development tool, to allow website designers and programmers to test their work on their own computers without any access to the Internet. .
* Apache Web server:
- Apache Web Server is an open source Web server for creation, deployment and management web applications.
- Which is designed to host one or more Web applications,
- It is also widely used by Web server many companies uses this server to host their internal web applications by configuring shared/virtual hosting,
  as by default, Apache Web Server supports and distinguishes between different hosts that reside on the same machine.
+ To install Apache-server on Linux, use the following command
 * Ex := Ubuntu/Debian.
#+begin_example
sudo apt-get install apache2
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
yum install httpd
#+end_example
** How to host a website?:
1) To start the apache server, use the following command:
 * Ex := Ubuntu/Debian.
#+begin_example
service apache2 start
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
service httpd start
#+end_example
2) open browser and type =localhost= or =127.0.0.1= then, browser displays the default apache page. If the default page is not found, then restart the apache server by using the following command.
 * Ex := Ubuntu/Debian.
#+begin_example
service apache2 restart
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
service httpd restart
#+end_example
3) create a sample html, js and css files and place them in a folder. 
4) move the contents of the folder to  =/var/www/html= or =/var/www/=
5) open browser and type =localhost/<file name> or 127.0.0.1/<file name>.
#+begin_example
localhost/example.html
#+end_example
6) To stop the apache server, use the following command:
 * Ex := Ubuntu/Debian.
#+begin_example
service apache2 stop
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
service httpd stop
#+end_example
* DNS-Server 
 - Domain Name System (or Service or Server), an Internet service that translates domain names into IP addresses. Because domain names are alphabetic,
   they're easier to remember. The Internet however, is really based on IP addresses. Every time you use a domain name, therefore,
   a DNS service must translate the name into the corresponding IP address.
   EX : - To find the IP address of www.example.com. We use command as below
#+begin_example
nslookup www.example.com
#+end_example
The above command will give the ip address associated with =www.example.com= using DNS server.
* DHCP(Dynamic Host Configuration Protocol):
 - DHCP is a Network protocol that automatically provides an Internet Protocol (IP), Netmask, Default gateway, DNS entries to the host.
** Advantages of DHCP-Server:
 - DHCP is useful for automatic configuration of client network interfaces. When configuring the client system, the administrator chooses DHCP instead of
   specifying an IP address, netmask, gateway, or DNS servers. The client retrieves this information from the DHCP server. 
 - There is no need to manually configure each client with an IP address.
 - You don't need to keep a record of the IP addresses that you have assigned.
 - You can automatically assign a new IP address if you move a client to a different subnet.
* SSH-Server:
 - Secure Shell, is a protocol used to securely log onto remote systems. It is the most common way to access remote Linux and Unix-like servers,
   such as VPS instances.
****** Syntax:= The tool on Linux for connecting to a remote system using SSH is called
#+begin_example
ssh remote_host
#+end_example
 - The remote_host in this example is the IP address or domain name that you are trying to connect to.
 - This command assumes that your username on the remote system is the same as your username on your local system.
 - If your username is different on the remote system, you can specify it by using this syntax:
#+begin_example
ssh remote_username@remote_host
#+end_example
 - Once you have connected to the server, you will probably be asked to verify your identity by providing a password.
** Type the following yum command to install openssh client and server.
#+begin_example
yum -y install openssh-server openssh-clients
#+end_example
*** How Does SSH Work?
 - SSH works by connecting a client program to an ssh server.
 - In the above commands, ssh is the client program. The ssh server is already running on the remote_host that we specified.
 - The process needed to start an ssh server depends on the distribution of Linux that you are using.
 - You can start the ssh server on the VPS by typing:
#+begin_example
sudo service ssh start
#+end_example
 - That should start the sshd server and you can then log in remotely.
*** How Does Key-based Authentication Work?
 - Key-based authentication works by creating a pair of keys: a private key and a public key.
 - The private key is located on the client machine and is secured and kept secret.
 - The public key can be given to anyone or placed on any server you wish to access.
 - When you attempt to connect using a key-pair, the server will use the public key to create a message for the client computer that can only be read with the private key.
 - The client computer then sends the appropriate response back to the server and the server will know that the client is legitimate.
 - This entire process is done in the background automatically after you set up keys.
**** How To Create SSH Keys
 - SSH keys should be generated on the computer you wish to log in from. This is usually your local computer.
 - Enter the following into the command line:
#+begin_example
ssh-keygen
#+end_example 
 - Press enter to accept the defaults. Your keys will be created at ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa.
 - Change into the .ssh directory by typing:
#+begin_example
cd ~/.ssh
#+end_example
 - As you can see, the id_rsa file is readable and writable only to the owner. This is how it should be to keep it secret.
 - The id_rsa.pub file, however, can be shared and has permissions appropriate for this activity.
***** How To Transfer Your Public Key to the Server
 - You can copy the public key to the remote server by issuing this command:
#+begin_example
ssh-copy-id remote_host
#+end_example
 - This will start an SSH session, which you will need to authenticate with your password.
 - After you enter your password, it will copy your public key to the server's authorized keys file, which will allow you to log in without the password next time.
* Bridge:
- Bridge is a device that connects two LANs and controls data flow between them.
- Especially bridge is a store & forward device. During the connection of different LANs, it receives the frame from one LAN and transfer the same
  frame without encapsulating or without modification to other LAN. By using local and remote bridge, a network administrator can easily extend the network distance.
** The difference between switch and bridge
-  Bridge is is device which divides a network into two. Switch connects multiple networks.
-  Bridge are software based and switch is a hardware based.
-  Bridge can have upto 16 ports while switch can handle many ports.
-  Bridge is rarely used. Switches are frequently used. 
* Setting Up Bridge Network
** Introduction:
- This page explains about creating a bridge and setting up of a bridge network on base machine.
- The document further explains the step by step creation of this network.
- Seen below is the diagram of bridged network along with its Containers.
[[/home/raghu/Downloads/Untitled drawing(1).jpg]]
** Setting Up Bridge Network:
- The first task is to create a bridge, let us call it br0 (br0=bridgename). Bridge is basically a file configured with essential
  settings which mentions the bridge name, boot protocol, on boot settings, type and if it is to be network manager controlled.
  Move to the network-scripts directory in =/etc/sysconfig= by following command
#+begin_example
cd /etc/sysconfig/network-scripts/
#+end_example
- And create a file with name =ifcfg-br0= and write the following settings:
#+begin_example
DEVICE=br0
TYPE=Bridge
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=none
#+end_example
- Restart network service to effect the changes.
#+begin_example
service network restrat
#+end_example
- Following command can be issued to list all the bridges created and the interfaces they are connected to.
#+begin_example
brctl show
#+end_example
- The output has to bridge and any other bridges previously created with connected interfaces.
- With current configuration used, a sample output can be seen below:
#+begin_example
bridge name	bridge id		STP enabled	interfaces
br0		8000.5cf9dd75d1f8	no		
#+end_example
*** Creating Container:
- We next move ahead in creation of a container with following settings:
 * Syntax := 
#+begin_example
vzctl create <CT-ID> --ostemplate <template> --hostname <host-name>
#+end_example
 * Ex := 
#+begin_example
vzctl create 201 --ostemplate centos-6-x86_64-minimal --hostname centos
#+end_example
- set the netfilter to full for the container.
 * Syntax := 
#+begin_example
vzctl set <CT-ID> --netfilter full --save
#+end_example
 * Ex := 
#+begin_example
vzctl set 201 --netfliter full --save
#+end_example
- The Container need to be connected to the bridge br0 and this is achieved by connecting with the respective interface. This is done by the following commands
 * Syntax := 
#+begin_example
vzctl set <CT-ID> --netif_add eth0,,,,br0 --save
#+end_example
 * Ex := 
#+begin_example
vzctl set 201 --netif_add eth0,,,,br0 --save
#+end_example
- Start the container and set its status to running.
 * Syntax := 
#+begin_example
vzctl start <CT-ID>
#+end_example
 * Ex := 
#+begin_example
vzctl start 201
#+end_example
*** Configuring Container:
- Enter the contianer
 * Syntax := 
#+begin_example
vzctl enter <CT-ID>
#+end_example
 * Ex := 
#+begin_example
vzctl enter 201
#+end_example
- The ifcfg-eth0 file present in =/etc/sysconfig/network-script= directory for the container need to be configured with following settings
 * Syntax := 
#+begin_example
DEVICE=eth0
HWADDR=<<Hardware address of eth0>>
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=<<IP address of container>>
NETMASK=<<IP address of netmask>>
#+end_example
 * Ex := 
#+begin_example
DEVICE=eth0
HWADDR=00:18:51:20:58:72
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.11.12.1
NETMASK=255.0.0.0
#+end_example
- Restart the network service and check if the eth0 is assigned to ip-address or not (ifconfig command)
- The hardware address can be known by the command ifconfig -a.
- Note: Hardware address will be only available after adding the configuration files. The process is to first add the configuration without the hardware address,
  restart the service and later update it.
* 2016-March-23-Wednesday
** From 09:30 AM TO 05:30 PM :
- Today I gone through Bridge networking and Configured bridge on containers in OpenVZ. I have practised bridge networking concepts, created couple of containers
  and installed bridge and configured container using bridge.

* 2016-March-25-Friday
** From 09:30 AM TO 05:30 PM :
- Revised concepts of variuos web-servers such as Apache and SSH servers on CentOS. 
* Apache Web server:
- Apache Web Server is an open source Web server for creation, deployment and management web applications.
- Which is designed to host one or more Web applications,
- It is also widely used by Web server many companies uses this server to host their internal web applications by configuring shared/virtual hosting,
  as by default, Apache Web Server supports and distinguishes between different hosts that reside on the same machine.
+ To install Apache-server on Linux, use the following command
 * Ex := Ubuntu/Debian.
#+begin_example
sudo apt-get install apache2
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
yum install httpd
#+end_example
** How to host a website?:
1) To start the apache server, use the following command:
 * Ex := Ubuntu/Debian.
#+begin_example
service apache2 start
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
service httpd start
#+end_example
2) open browser and type =localhost= or =127.0.0.1= then, browser displays the default apache page. If the default page is not found, then restart the apache server by using the following command.
 * Ex := Ubuntu/Debian.
#+begin_example
service apache2 restart
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
service httpd restart
#+end_example
3) create a sample html, js and css files and place them in a folder. 
4) move the contents of the folder to  =/var/www/html= or =/var/www/=
5) open browser and type =localhost/<file name> or 127.0.0.1/<file name>.
#+begin_example
localhost/example.html
#+end_example
6) To stop the apache server, use the following command:
 * Ex := Ubuntu/Debian.
#+begin_example
service apache2 stop
#+end_example
 * Ex := RHEL/CENTOS
#+begin_example
service httpd stop
#+end_example
* SSH-Server:
 - Secure Shell, is a protocol used to securely log onto remote systems. It is the most common way to access remote Linux and Unix-like servers,
   such as VPS instances.
****** Syntax:= The tool on Linux for connecting to a remote system using SSH is called
#+begin_example
ssh remote_host
#+end_example
 - The remote_host in this example is the IP address or domain name that you are trying to connect to.
 - This command assumes that your username on the remote system is the same as your username on your local system.
 - If your username is different on the remote system, you can specify it by using this syntax:
#+begin_example
ssh remote_username@remote_host
#+end_example
 - Once you have connected to the server, you will probably be asked to verify your identity by providing a password.
** Type the following yum command to install openssh client and server.
#+begin_example
yum -y install openssh-server openssh-clients
#+end_example
*** How Does SSH Work?
 - SSH works by connecting a client program to an ssh server.
 - In the above commands, ssh is the client program. The ssh server is already running on the remote_host that we specified.
 - The process needed to start an ssh server depends on the distribution of Linux that you are using.
 - You can start the ssh server on the VPS by typing:
#+begin_example
sudo service ssh start
#+end_example
 - That should start the sshd server and you can then log in remotely.
*** How Does Key-based Authentication Work?
 - Key-based authentication works by creating a pair of keys: a private key and a public key.
 - The private key is located on the client machine and is secured and kept secret.
 - The public key can be given to anyone or placed on any server you wish to access.
 - When you attempt to connect using a key-pair, the server will use the public key to create a message for the client computer that can only be read with the private key.
 - The client computer then sends the appropriate response back to the server and the server will know that the client is legitimate.
 - This entire process is done in the background automatically after you set up keys.
**** How To Create SSH Keys
 - SSH keys should be generated on the computer you wish to log in from. This is usually your local computer.
 - Enter the following into the command line:
#+begin_example
ssh-keygen
#+end_example 
 - Press enter to accept the defaults. Your keys will be created at ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa.
 - Change into the .ssh directory by typing:
#+begin_example
cd ~/.ssh
#+end_example
 - As you can see, the id_rsa file is readable and writable only to the owner. This is how it should be to keep it secret.
 - The id_rsa.pub file, however, can be shared and has permissions appropriate for this activity.
***** How To Transfer Your Public Key to the Server
 - You can copy the public key to the remote server by issuing this command:
#+begin_example
ssh-copy-id remote_host
#+end_example
 - This will start an SSH session, which you will need to authenticate with your password.
 - After you enter your password, it will copy your public key to the server's authorized keys file, which will allow you to log in without the password next time.

* 2016-March-26-Satarday
** From 10:30 AM TO 04:30 PM :
- Revised concepts of all Virtualization Techniques and Various web-servers so far whatever I have learned.
