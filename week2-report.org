* 2016-Feb-27-Saturday
** From 9:30 AM TO 12:30 PM :
I have gone through the =git= tutorial which is available at [[https://githowto.com/][here]] and learned some basic commands that includes following commands and also I read about difference between =git= tool and =github.com= , =bitbucket.com= and tried to create multiple repositories at =github.com= & =bitbucket.com= and executed the following commands and got know the uses of following commands
+ git config --global user.name "username"
+ git config --global user.email "emailid"
+ git config --global http.proxy http://proxy.iiit.ac.in:8080
+ git config --global https.proxy http://proxy.iiit.ac.in:8080
+ git init 
+ git add filename
+ git commit -m "commit message here"
+ git push origin master
+ git clone repo_url
+ git log
+ git status
+ git remote -v
+ git pull origin master
** From 2:00 AM TO 05:30 PM :
I have practised all the emacs shortcuts and got to know some basic =org-mode= template keywords. And prepared all the work logs using org-mode with emacs

* 2016-Feb-29-Monday
** From 9:30 AM TO 05:30 PM :
I have completed Regular Expressions concepts and took video lecture at [[http://sbarjatiya.com/website/video_tutorials/regular_expressions.ogv][www.sbarjatiya.com]] and done the assignments as well. Through which I came to learn the following commands
+ *  (The preceding item will be matched zero or more times)
#+begin_example
1. rm -f file* (which is used to remove files from started)
2. rm -f *.txt (which is used to remove files from ending with extension txt)
#+end_example

+ ?  (The preceding item is optional and will be matched at one time)
#+begin_example
rm -f file? (which is used to remove files with only one charecter or number)
#+end_example
+ ??  (The preceding item is optional and will be matched at two times)
#+begin_example
rm -f file?? (which is used to remove files with only two charecters or numbers)
#+end_example
+ [a-b] or [A-Z] (The preceding item is matched exactly from a-z or A-Z)
#+begin_example
rm -f (a-z)/(A-Z) (which is used to remove alphabeticals in a directories)
#+end_example
+ [0-9] (The preceding item is matched exactly from 0-9)
#+begin_example
rm -f [0-9] (which is used to remove digits in a directories)
#+end_example

* grep command:
+ - grep is a command which is used to search a word or number in a files
#+begin_example
Syntax:-grep <OPTIONS> <PATTERN> <FILES>
grep ^a filename (^ means start with line of a in file)
grep a$ filename ($ means end with line in file )
grep '[[:alpha:]]\>' * filename (which is used to alphabets ending of a line)
grep '\<[[:alpha:]]' * filename (which is used to alphabets begining of a line)
grep '[[:digit:]]\>' * filename (which is used to numbers ending of a line)
grep '\<[[:digit:]]' * filename (which is used to numbers  begining of a line)
#+end_example

* sed command:
 - sed is a command which is used to inline edit the file
 
#+begin_example
Syntax:-sed <OPTIONS> <SCRIPT> <INPUTFILE>
sed -e 's/aple/apple/g' filename (s indicates source, 'g' option after the last slash tells sed to perform a global replace.)
sed -e 's/ornge*/orange/g' filename (* it indicates the all the charecters edit at once)
#+end_example
 
* 2016-March-01-Tuesday
** From 9:30 AM TO 12:30 PM :
  - I started taking online tutorials on FIND,TAIL and SORT Commands. And completed 3
    online tutorials and done the assignment as well. Through which I came to learn following commands
   
#+begin_example
Syntax:-find <path> -name <filename> (which is used to search files or directory)
find /home/raghu/file -name filename
#+end_example

#+begin_example
Syntax:-tail -n <filename> (which is used to output of last lines)
tail -2 filename (output last 2 lines)
#+end_example

#+begin_example
Syntax:-tail +n <filename> (which is used to output of fisrt lines)
tail +2 filename (output first 2 lines)
#+end_example

#+begin_example
Syntax:-sort <filename>
sort /home/raghu/file.txt (which is used for sorting lines in a files)
#+end_example

** From 2:00 PM TO 6:00 PM :
  - I started taking online tutorials on LINK, REDIRECTING INPUT & OUTPUT and PIPES Commands. And completed 3
    online tutorials and done the assignment as well. Through which I came to learn following commands
   
  
#+begin_example
Syntax:-ln <filename> <linkname>
 ln filename newfilename (link from one file or directory to another can be created using the ln command)
#+end_example

* Redirecting INPUT and OUTPUT:
 - A program can be told where to look for input and where to send output, using input/output redirection.

** Redirecting Input:
#+begin_example
Syntax:- ls < <input>
ls < filename 
#+end_example

** Redirecting Output:
#+begin_example
Syntax:- ls > <Output>
ls -l > filename
#+end_example

* Pipes:
 - A pipe is used to connect the output of one command to the input of another command

#+begin_example
ls | wc -l (which is used to list output of a files or directories)
cat filename | sort (which is used to see the contents in a file and sorting lines)
cat filename | wc -l (which is used to see the contents in a file and count lines in a file)
cat filename | grep [a-z] (which is used to search word or number in a file)
#+end_example
* 2016-March-02-Wednesday
** From 9:30 AM TO 12:30 PM :
 - I started taking online course on File Permissions. And completed 2
    video lectures and done the assignment as well. Through which I came to learn following commands

* File Permissions:   
 - Permissions are access to rights to users and groups of users.Every file or directory in linux has 3 permssions defined as owners, those are

   * Owner  - a single person who owns the file.
   * Group  - every file belongs to a single group.
   * Others - everyone else who is not in the group or the owner.
   
*** User rights/Permissions
#+begin_example
chmod rwxrwxrwx <filename>
#+end_example
    + The first set of three characters (rwx) is for the owner permissions.
    + The second set of three characters (rwx) is for the Group permissions.
    + The third set of three characters (rwx) is for the All Users permissions.
    - The permission settings as a series of bits. Here's how it works:
    + rwx = 111 in binary = 7 in decimal
    + rw- = 110 in binary = 6 in decimal
    + r-x = 101 in binary = 5 in decimal
    + r-- = 100 in binary = 4 in decimal
    + --x = 001 in binary = 1 in decimal
    + -w- = 010 in binary = 2 in deciaml
    + -wx = 011 in binary = 3 in decimal
#+begin_example
Syntax:- chmod <options> <mode> <files>
chmod 777 file
#+end_example 

#+begin_example
chmod -R 777 folder
#+end_example 

** From 2:00 PM TO 6:00 PM :  
 - Took online course from [[http://sbarjatiya.com/website/video_tutorials/working_remotely.ogv]] on ssh, scp and rsync Commands. And completed
    video lectures and done the assignment as well. Through which I came to learn following commands

* SSH (Secure Shell):
 - SSH is a Network protocol which is used for secure communication.
 - The Secure Shell (SSH) Protocol by default uses port 22.

#+begin_example
Syntax:- ssh <username>@<hostname>
#+end_example 

* SCP (Secure Copy):
 - SCP is a secure copy from between hosts on a network.

#+begin_example
Syntax:- scp [options] <username>@<hostname>:<sourcepath> <destination> (copy from remote machine to local machine)
Syntax:- scp [options] <source:path> <username>@<hostname>:<destination> (copy from local machine to remote machine)
#+end_example

* rsync (Remote Synchronized):
 - rsync is a remote synchronized command, which is used for copying files and directories remotely as well as locally in Linux/Unix systems.
#+begin_example
Syntax:- rsync [options] user@host:sourcepath destination:path (copy from remote machine to local machine)
Syntax:- rsync [options] source:path user@host:destination:path (copy from local machine to remote machine)
#+end_example

* Difference between SCP and RSYNC:
 - Itâ€™s faster than scp (Secure Copy) because rsync uses remote-update protocol which allows to transfer.
 - Difference between two files in a directory, it copies the two files from source to destination, but next time,
   it copies only the changed files to the desination

* 2016-March-03 Thursday
** From 9:30 AM TO 11:30 AM:
Worked with Yogesh and Sripathi about resolving issue which is related to the creating google drive shared and common folders in admin@vlabs.ac.in account. Through which I came to know few things
- Use of redmine tool to solve the issues
- Team work
- Came to know about creating google drive concepts like creating/modifying/deleting drive folders.
** From 01:30 AM TO 05:30 PM:
Read various online articles about shell script. And also completed 6 video lectures and done the assignment as well.
+ Creating various shell script to automate the tasks. So far I used following things in my shell script with the help of following things I used various commands that I am already aware of to perform specific tasks.
 + if statement
 + if then else statement
 + for loop
 + while loop
 + Command line aruguments using $?, $#, $1,$2 variables
 
* 2016-March-04 Friday
** From 9:30 AM TO 10:00 AM:
 I worked with Sripathi to configure git on Priya's laptop. 
** From 10:00 AM TO 12:30 AM:
 I have learned various package instalation commands both in =Centos= and =debian=. Those are
 - apt-get install package-name (or) yum install package-name
 - apt-get update (or) yum update
 - apt-get upgrade (or) yum upgrade
 - apt-cache search package-name (or) yum search package-name
 - dpkg -i package-name.deb (or) rpm -Uvh package-name.rpm
 - And executed the same commands on remote machine using ssh protocal.
** From 02:00 PM TO 05:30 PM:
 - Revised all the commands and concepts so far whatever I have learned. And clarified various doubts with Sripathi this gave me lot of confidance
 
* 2016-March-05-Satarday
** From 9:30 AM TO 05:00 PM :
 - I have practised shell commands and wrote a simple shell
   script that will update and install php, httpd, mysql-server and
   emacs. This script will also check status of http and mysql
   services.
** SCRIPT-1
 - Executed the script using command 
#+begin_example
chmod +x filename.sh
./install.sh 
#+end_example
Script has the following code
#+begin_example
#!/bin/bash
echo "############# WEL-COME ###############"
#To update the system
echo "############# Updating System........ ####################"
yum -y update
echo "############# Update is done........ ####################"

echo "################ Installing php......... ###########"
#To install the php
yum -y install php
if [ $? -eq 0 ]
then
    echo "Successfuly installed php"
else
    echo "Unable to installed php"
    exit
fi

echo "################ Installing Mysql-server......... ###########"
#To install the mysql-server
yum -y install mysql-server
if [ $? -eq 0 ]
then
    echo "Successfuly installed mysql-server"
else
    echo "Unable to install mysql-server"
    exit
fi

#To start the mysql-server
service mysql start
if [ $? -eq 0 ]
then
    echo "Successfuly started mysql server"
else
    echo "Unable to start myql server"
fi
echo "################ Installing Apache-server......... ###########"
#Installing the apache server
yum install -y httpd
if [ $? -eq 0 ]
then
    echo "Successfuly installed apache server"
else
 echo "Unable to install apache server"
fi

# To start the apache server
service httpd start
if [ $? -eq 0 ]
then
    echo "Successfuly started apache server"
else
    echo "Unable to start apache server"
fi
echo "################ Installing Emacs......... ###########"
# To installing emacs
yum install -y emacs
if [ $? -eq 0 ]
then 
    echo "Successfuly installed emacs"
else
    echo "Unable to install emacs"
fi
echo "############# END - THANK YOU ################"
exit

#+end_example

** SCRIPT-2
 - This script is about to create a folders, files based on functions using parameters
 - Executed the script using command 
#+begin_example
chmod +x function.sh
./function.sh 
#+end_example
Script has the following code
#+begin_example
#!/bin/bash
echo "####################### WEL-COME ##########################"
# To create a files from 1-10
for i in {1..10}
do
    touch ~/file$i
done

# This Function is to print the arguments provide while function call.
Hello () {
    first_arg=$1
    second_arg=$2
    third_arg=$3
    fourth_arg=$4
    fifth_arg=$5
    echo "Hello this is $first_arg $second_arg $third_arg $fourth_arg $fifth_arg"
}
# Function call to Hello with following arguments
Hello raghu pathi my new script

## To create a folder and file through function with specified argument
create_folder () {
    mkdir ~/$1
    touch ~/$2
}

create_folder foldername filename 

## To create a folders from 1-10 through function
folder ()
{
    folder $1
}
for i in {1..10}
do
mkdir ~/folder$i
done
echo "######################### END-THANK YOU ###########################"
exit
#+end_example




